// source: book.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.GoodreadBook.AuthorBook', null, global);
goog.exportSymbol('proto.GoodreadBook.Book', null, global);
goog.exportSymbol('proto.GoodreadBook.BookList', null, global);
goog.exportSymbol('proto.GoodreadBook.GetBookByAuthorIdsRequest', null, global);
goog.exportSymbol('proto.GoodreadBook.GetBookByIdsRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GoodreadBook.AuthorBook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GoodreadBook.AuthorBook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GoodreadBook.AuthorBook.displayName = 'proto.GoodreadBook.AuthorBook';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GoodreadBook.Book = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GoodreadBook.Book.repeatedFields_, null);
};
goog.inherits(proto.GoodreadBook.Book, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GoodreadBook.Book.displayName = 'proto.GoodreadBook.Book';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GoodreadBook.BookList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GoodreadBook.BookList.repeatedFields_, null);
};
goog.inherits(proto.GoodreadBook.BookList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GoodreadBook.BookList.displayName = 'proto.GoodreadBook.BookList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GoodreadBook.GetBookByIdsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GoodreadBook.GetBookByIdsRequest.repeatedFields_, null);
};
goog.inherits(proto.GoodreadBook.GetBookByIdsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GoodreadBook.GetBookByIdsRequest.displayName = 'proto.GoodreadBook.GetBookByIdsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GoodreadBook.GetBookByAuthorIdsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GoodreadBook.GetBookByAuthorIdsRequest.repeatedFields_, null);
};
goog.inherits(proto.GoodreadBook.GetBookByAuthorIdsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GoodreadBook.GetBookByAuthorIdsRequest.displayName = 'proto.GoodreadBook.GetBookByAuthorIdsRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GoodreadBook.AuthorBook.prototype.toObject = function(opt_includeInstance) {
  return proto.GoodreadBook.AuthorBook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GoodreadBook.AuthorBook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GoodreadBook.AuthorBook.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    role: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GoodreadBook.AuthorBook}
 */
proto.GoodreadBook.AuthorBook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GoodreadBook.AuthorBook;
  return proto.GoodreadBook.AuthorBook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GoodreadBook.AuthorBook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GoodreadBook.AuthorBook}
 */
proto.GoodreadBook.AuthorBook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GoodreadBook.AuthorBook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GoodreadBook.AuthorBook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GoodreadBook.AuthorBook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GoodreadBook.AuthorBook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string author_id = 1;
 * @return {string}
 */
proto.GoodreadBook.AuthorBook.prototype.getAuthorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GoodreadBook.AuthorBook} returns this
 */
proto.GoodreadBook.AuthorBook.prototype.setAuthorId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string role = 2;
 * @return {string}
 */
proto.GoodreadBook.AuthorBook.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GoodreadBook.AuthorBook} returns this
 */
proto.GoodreadBook.AuthorBook.prototype.setRole = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GoodreadBook.Book.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GoodreadBook.Book.prototype.toObject = function(opt_includeInstance) {
  return proto.GoodreadBook.Book.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GoodreadBook.Book} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GoodreadBook.Book.toObject = function(includeInstance, msg) {
  var f, obj = {
    bookId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isbn: jspb.Message.getFieldWithDefault(msg, 4, ""),
    asin: jspb.Message.getFieldWithDefault(msg, 5, ""),
    link: jspb.Message.getFieldWithDefault(msg, 6, ""),
    authorsList: jspb.Message.toObjectList(msg.getAuthorsList(),
    proto.GoodreadBook.AuthorBook.toObject, includeInstance),
    similarBooksList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    averageRating: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GoodreadBook.Book}
 */
proto.GoodreadBook.Book.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GoodreadBook.Book;
  return proto.GoodreadBook.Book.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GoodreadBook.Book} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GoodreadBook.Book}
 */
proto.GoodreadBook.Book.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBookId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsbn(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsin(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLink(value);
      break;
    case 7:
      var value = new proto.GoodreadBook.AuthorBook;
      reader.readMessage(value,proto.GoodreadBook.AuthorBook.deserializeBinaryFromReader);
      msg.addAuthors(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addSimilarBooks(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAverageRating(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GoodreadBook.Book.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GoodreadBook.Book.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GoodreadBook.Book} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GoodreadBook.Book.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBookId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsbn();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAsin();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLink();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAuthorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.GoodreadBook.AuthorBook.serializeBinaryToWriter
    );
  }
  f = message.getSimilarBooksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getAverageRating();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
};


/**
 * optional string book_id = 1;
 * @return {string}
 */
proto.GoodreadBook.Book.prototype.getBookId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GoodreadBook.Book} returns this
 */
proto.GoodreadBook.Book.prototype.setBookId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.GoodreadBook.Book.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GoodreadBook.Book} returns this
 */
proto.GoodreadBook.Book.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.GoodreadBook.Book.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.GoodreadBook.Book} returns this
 */
proto.GoodreadBook.Book.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string isbn = 4;
 * @return {string}
 */
proto.GoodreadBook.Book.prototype.getIsbn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.GoodreadBook.Book} returns this
 */
proto.GoodreadBook.Book.prototype.setIsbn = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string asin = 5;
 * @return {string}
 */
proto.GoodreadBook.Book.prototype.getAsin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.GoodreadBook.Book} returns this
 */
proto.GoodreadBook.Book.prototype.setAsin = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string link = 6;
 * @return {string}
 */
proto.GoodreadBook.Book.prototype.getLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.GoodreadBook.Book} returns this
 */
proto.GoodreadBook.Book.prototype.setLink = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated AuthorBook authors = 7;
 * @return {!Array<!proto.GoodreadBook.AuthorBook>}
 */
proto.GoodreadBook.Book.prototype.getAuthorsList = function() {
  return /** @type{!Array<!proto.GoodreadBook.AuthorBook>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GoodreadBook.AuthorBook, 7));
};


/**
 * @param {!Array<!proto.GoodreadBook.AuthorBook>} value
 * @return {!proto.GoodreadBook.Book} returns this
*/
proto.GoodreadBook.Book.prototype.setAuthorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.GoodreadBook.AuthorBook=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GoodreadBook.AuthorBook}
 */
proto.GoodreadBook.Book.prototype.addAuthors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.GoodreadBook.AuthorBook, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GoodreadBook.Book} returns this
 */
proto.GoodreadBook.Book.prototype.clearAuthorsList = function() {
  return this.setAuthorsList([]);
};


/**
 * repeated string similar_books = 8;
 * @return {!Array<string>}
 */
proto.GoodreadBook.Book.prototype.getSimilarBooksList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.GoodreadBook.Book} returns this
 */
proto.GoodreadBook.Book.prototype.setSimilarBooksList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.GoodreadBook.Book} returns this
 */
proto.GoodreadBook.Book.prototype.addSimilarBooks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GoodreadBook.Book} returns this
 */
proto.GoodreadBook.Book.prototype.clearSimilarBooksList = function() {
  return this.setSimilarBooksList([]);
};


/**
 * optional float average_rating = 9;
 * @return {number}
 */
proto.GoodreadBook.Book.prototype.getAverageRating = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GoodreadBook.Book} returns this
 */
proto.GoodreadBook.Book.prototype.setAverageRating = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GoodreadBook.BookList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GoodreadBook.BookList.prototype.toObject = function(opt_includeInstance) {
  return proto.GoodreadBook.BookList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GoodreadBook.BookList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GoodreadBook.BookList.toObject = function(includeInstance, msg) {
  var f, obj = {
    booksList: jspb.Message.toObjectList(msg.getBooksList(),
    proto.GoodreadBook.Book.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GoodreadBook.BookList}
 */
proto.GoodreadBook.BookList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GoodreadBook.BookList;
  return proto.GoodreadBook.BookList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GoodreadBook.BookList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GoodreadBook.BookList}
 */
proto.GoodreadBook.BookList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GoodreadBook.Book;
      reader.readMessage(value,proto.GoodreadBook.Book.deserializeBinaryFromReader);
      msg.addBooks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GoodreadBook.BookList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GoodreadBook.BookList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GoodreadBook.BookList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GoodreadBook.BookList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBooksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GoodreadBook.Book.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Book books = 1;
 * @return {!Array<!proto.GoodreadBook.Book>}
 */
proto.GoodreadBook.BookList.prototype.getBooksList = function() {
  return /** @type{!Array<!proto.GoodreadBook.Book>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GoodreadBook.Book, 1));
};


/**
 * @param {!Array<!proto.GoodreadBook.Book>} value
 * @return {!proto.GoodreadBook.BookList} returns this
*/
proto.GoodreadBook.BookList.prototype.setBooksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GoodreadBook.Book=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GoodreadBook.Book}
 */
proto.GoodreadBook.BookList.prototype.addBooks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GoodreadBook.Book, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GoodreadBook.BookList} returns this
 */
proto.GoodreadBook.BookList.prototype.clearBooksList = function() {
  return this.setBooksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GoodreadBook.GetBookByIdsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GoodreadBook.GetBookByIdsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GoodreadBook.GetBookByIdsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GoodreadBook.GetBookByIdsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GoodreadBook.GetBookByIdsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bookIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GoodreadBook.GetBookByIdsRequest}
 */
proto.GoodreadBook.GetBookByIdsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GoodreadBook.GetBookByIdsRequest;
  return proto.GoodreadBook.GetBookByIdsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GoodreadBook.GetBookByIdsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GoodreadBook.GetBookByIdsRequest}
 */
proto.GoodreadBook.GetBookByIdsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addBookIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GoodreadBook.GetBookByIdsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GoodreadBook.GetBookByIdsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GoodreadBook.GetBookByIdsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GoodreadBook.GetBookByIdsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBookIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string book_ids = 1;
 * @return {!Array<string>}
 */
proto.GoodreadBook.GetBookByIdsRequest.prototype.getBookIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.GoodreadBook.GetBookByIdsRequest} returns this
 */
proto.GoodreadBook.GetBookByIdsRequest.prototype.setBookIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.GoodreadBook.GetBookByIdsRequest} returns this
 */
proto.GoodreadBook.GetBookByIdsRequest.prototype.addBookIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GoodreadBook.GetBookByIdsRequest} returns this
 */
proto.GoodreadBook.GetBookByIdsRequest.prototype.clearBookIdsList = function() {
  return this.setBookIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GoodreadBook.GetBookByAuthorIdsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GoodreadBook.GetBookByAuthorIdsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GoodreadBook.GetBookByAuthorIdsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GoodreadBook.GetBookByAuthorIdsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GoodreadBook.GetBookByAuthorIdsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GoodreadBook.GetBookByAuthorIdsRequest}
 */
proto.GoodreadBook.GetBookByAuthorIdsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GoodreadBook.GetBookByAuthorIdsRequest;
  return proto.GoodreadBook.GetBookByAuthorIdsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GoodreadBook.GetBookByAuthorIdsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GoodreadBook.GetBookByAuthorIdsRequest}
 */
proto.GoodreadBook.GetBookByAuthorIdsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAuthorIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GoodreadBook.GetBookByAuthorIdsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GoodreadBook.GetBookByAuthorIdsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GoodreadBook.GetBookByAuthorIdsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GoodreadBook.GetBookByAuthorIdsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthorIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string author_ids = 1;
 * @return {!Array<string>}
 */
proto.GoodreadBook.GetBookByAuthorIdsRequest.prototype.getAuthorIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.GoodreadBook.GetBookByAuthorIdsRequest} returns this
 */
proto.GoodreadBook.GetBookByAuthorIdsRequest.prototype.setAuthorIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.GoodreadBook.GetBookByAuthorIdsRequest} returns this
 */
proto.GoodreadBook.GetBookByAuthorIdsRequest.prototype.addAuthorIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GoodreadBook.GetBookByAuthorIdsRequest} returns this
 */
proto.GoodreadBook.GetBookByAuthorIdsRequest.prototype.clearAuthorIdsList = function() {
  return this.setAuthorIdsList([]);
};


goog.object.extend(exports, proto.GoodreadBook);
