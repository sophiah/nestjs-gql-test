receivers:
  otlp:
    protocols:
      grpc:
      http:
  # Dummy receiver that's never used, because a pipeline is required to have one.
  otlp/spanmetrics:
    protocols:
      grpc:
        endpoint: 0.0.0.0:12346

processors:
  # compresses the data into batches and optimizes data transmission
  batch:
  # extracts the metrics from spans
  spanmetrics:
    # metrics_exporter = prometheus, export to exporters.prometheus
    metrics_exporter: prometheus
    # defines the histogram buckets
    latency_histogram_buckets:
      [200ms, 400ms, 500ms, 800ms, 1s, 1200ms, 1400ms, 1600ms, 1800ms, 2s, 5s, 7s]

exporters:
  # Jaeger backend
  zipkin:
    endpoint: "http://zipkin-all-in-one:9411/api/v2/spans"
  
  # defines an endpoint for prometheus
  prometheus:
    endpoint: "0.0.0.0:9464"

# configure what components are enabled
service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [spanmetrics, batch]
      exporters: [zipkin]
    metrics:
      receivers: [otlp/spanmetrics]
      # processors: [batch]
      exporters: [prometheus]
